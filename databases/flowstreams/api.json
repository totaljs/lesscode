{
	"paused": false,
	"cloning": true,
	"readme": "",
	"name": "API",
	"variables": {},
	"origin": "http://127.0.0.1:8000",
	"dtupdated": "2024-02-06T18:07:40.882Z",
	"id": "api",
	"components": {
		"taction": "<script total>\n\n\texports.id = 'taction';\n\texports.name = 'Action';\n\texports.icon = 'ti ti-totaljs';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Total.js';\n\texports.config = { partial: false, name: 'Unknown', input: '', query: '', color: '#68B25B', params: '', user: 0, permissions: '', code: '$.success();', strerr: false, path: 'response', autoresponse: false };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.install = function(com) {\n\n\t\tMAIN.flowtaction = {};\n\n\t\tconst ARGS = /\\{{1,2}[a-z0-9_.-\\s]+\\}{1,2}/gi;\n\t\tconst Options = function($, config) {\n\n\t\t\tvar t = this;\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data || typeof(data) !== 'object')\n\t\t\t\tdata = {};\n\n\t\t\tt.id = config.name;\n\t\t\tt.error = new ErrorBuilder();\n\t\t\tt.controller = $.refs.controller;\n\t\t\tt.payload = data.payload || data.model || data.body;\n\n\t\t\tif (typeof(t.payload) !== 'object' || !t.payload)\n\t\t\t\tt.payload = {};\n\n\t\t\tt.message = $;\n\t\t\tt.config = config;\n\t\t\tt.user = data.user;\n\t\t\tt.query = data.query || {};\n\t\t\tt.params = data.params || {};\n\t\t\tt.url = data.url;\n\t\t\tt.language = data.language;\n\t\t\tt.headers = data.headers || {};\n\t\t\tt.files = data.files || [];\n\t\t\tt.cookies = data.cookies || {};\n\t\t\tt.ip = data.ip;\n\t\t\tt.ua = data.ua;\n\t\t\tt.request = data;\n\t\t};\n\n\t\tOptions.prototype = {\n\n\t\t\tget value() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tget model() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tset value(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t},\n\n\t\t\tset model(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.audit = function(message, type) {\n\t\t\tF.audit(this, message ? this.variables(message) : '', type);\n\t\t};\n\n\t\tOptions.prototype.success = function(value) {\n\t\t\tvar self = this;\n\t\t\tself.request[self.config.path] = { success: true, value: value };\n\t\t\tself.message.send('output', self.request);\n\t\t};\n\n\t\tOptions.prototype.cancel = function() {\n\t\t\tvar self = this;\n\t\t\tself.message.destroy();\n\t\t};\n\n\t\tOptions.prototype.successful = function(callback) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, a, b, c) {\n\t\t\t\tif (err)\n\t\t\t\t\tself.invalid(err);\n\t\t\t\telse\n\t\t\t\t\tcallback.call(self, a, b, c);\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.send = Options.prototype.callback = function(value) {\n\n\t\t\tvar self = this;\n\n\t\t\tif (arguments.length == 0) {\n\t\t\t\treturn function(err, response) {\n\t\t\t\t\terr && self.error.push(err);\n\t\t\t\t\tself.callback(response);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlet msg = self.message;\n\t\t\tlet refs = msg.refs;\n\t\t\tlet cfg = self.config;\n\n\t\t\tif (self.error.items.length) {\n\t\t\t\tself.request[cfg.path] = cfg.strerr ? self.error.toString() : self.error.output();\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.invalid(self.error);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('error', self.request);\n\n\t\t\t} else {\n\n\t\t\t\tself.request[cfg.path] = value;\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.json(value);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('output', self.request);\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.done = function(arg) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\tself.error.push(err);\n\t\t\t\t\tself.callback(null);\n\t\t\t\t} else\n\t\t\t\t\tself.callback({ success: true, value: arg === true ? response : arg });\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.invalid = function(error, path, index) {\n\t\t\tvar self = this;\n\t\t\tself.error.push(error, path, index);\n\t\t\tself.callback(null);\n\t\t};\n\n\t\tOptions.prototype.cookie = function(name, value, expire, options) {\n\t\t\tvar self = this;\n\t\t\tif (value === undefined)\n\t\t\t\treturn self.cookies[name];\n\n\t\t\tif (value === null)\n\t\t\t\texpire = '-1 day';\n\n\t\t\tif (self.controller) {\n\t\t\t\tself.controller.cookie(name, value, expire, options);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tOptions.prototype.variables = function(str, data) {\n\n\t\t\tif (str.indexOf('{') === -1)\n\t\t\t\treturn str;\n\n\t\t\tvar $ = this;\n\n\t\t\treturn str.replace(ARGS, function(text) {\n\t\t\t\tvar l = text[1] === '{' ? 2 : 1;\n\t\t\t\tvar key = text.substring(l, text.length - l).trim();\n\t\t\t\tvar val = null;\n\t\t\t\tvar five = key.substring(0, 5);\n\t\t\t\tif (five === 'user.') {\n\t\t\t\t\tif ($.user) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.user[key] : U.get($.user, key);\n\t\t\t\t\t}\n\t\t\t\t} else if (five === 'data.') {\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? data[key] : U.get(data, key);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar six = key.substring(0, 6);\n\t\t\t\t\tif (six === 'model.' || six === 'value.') {\n\t\t\t\t\t\tif ($.model) {\n\t\t\t\t\t\t\tkey = key.substring(6);\n\t\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.model[key] : U.get($.model, key);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (six === 'query.')\n\t\t\t\t\t\tval = $.query[key.substring(6)];\n\t\t\t\t\telse if (key.substring(0, 7) === 'params.')\n\t\t\t\t\t\tval = $.params[key.substring(7)];\n\t\t\t\t}\n\t\t\t\treturn val == null ? text : val;\n\t\t\t});\n\n\t\t};\n\n\t\tMAIN.flowtaction.Options = Options;\n\t\tMAIN.flowtaction.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t};\n\n\texports.uninstall = function() {\n\t\tdelete MAIN.flowtaction;\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar cfg = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar opt = new MAIN.flowtaction.Options($, cfg);\n\t\t\tif (fn) {\n\n\t\t\t\t// check user\n\t\t\t\tif (cfg.user || cfg.permissions) {\n\n\t\t\t\t\tif ((cfg.user === 2 && opt.user) || (cfg.user === 1 && !opt.user)) {\n\t\t\t\t\t\topt.invalid(401);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cfg.user === 1 && cfg.permissions) {\n\t\t\t\t\t\tlet permissions = cfg.permissions.slice(0);\n\t\t\t\t\t\tpermissions.unshift(opt);\n\t\t\t\t\t\tif (UNAUTHORIZED.apply(global, permissions))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check data\n\t\t\t\tlet tmp;\n\n\t\t\t\tif (cfg.input) {\n\t\t\t\t\ttmp = cfg.input.transform(opt.payload, cfg.partial, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.payload = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.query) {\n\t\t\t\t\topt.error.prefix = 'query.';\n\t\t\t\t\ttmp = cfg.query.transform(opt.query, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.query = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.params) {\n\t\t\t\t\topt.error.prefix = 'params.';\n\t\t\t\t\ttmp = cfg.params.transform(opt.params, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.params = tmp.response;\n\t\t\t\t}\n\n\t\t\t\topt.error.prefix = '';\n\n\t\t\t\ttry {\n\t\t\t\t\tfn(opt, opt.payload);\n\t\t\t\t} catch (e) {\n\t\t\t\t\topt.invalid(e);\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\topt.invalid(501);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tfn = config.code.includes('await ') ? new MAIN.flowtaction.AsyncFunction('$', 'model', 'data', 'value', config.code) : new Function('$', 'model', 'data', 'value', config.code);\n\n\t\t\tcfg = {};\n\t\t\tfor (var key in config) {\n\t\t\t\tif (key !== 'code')\n\t\t\t\t\tcfg[key] = config[key];\n\t\t\t}\n\n\t\t\tcfg = instance.replace(cfg);\n\t\t\tcfg.input = cfg.input ? cfg.input.toJSONSchema() : null;\n\t\t\tcfg.query = cfg.query ? cfg.query.toJSONSchema() : null;\n\t\t\tcfg.params = cfg.params ? cfg.params.toJSONSchema() : null;\n\t\t\tcfg.permissions = cfg.permissions ? cfg.permissions.split(',').trim() : null;\n\n\t\t\tif (cfg.permissions && !cfg.permissions.length)\n\t\t\t\tcfg.permissions = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component creates similar functionality as Total.js Actions.\n\n## Payload\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\n## Custom scripting\n\n- supports `await`\n- supports Total.js global functions\n\n__Properties__:\n\n- `$.model {Object}` or `model` parsed payload\n- `$.query {Object}` parsed URL query arguments\n- `$.params {Object}` parsed URL params\n- `$.cookies {Object}` parsed cookies\n- `$.files [Object]` uploaded files\n- `$.user {Object}` user session (optional)\n- `$.headers {Object}` request headers\n- `$.ip {String}` IP address (optional)\n- `$.language {String}` optional\n- `$.ua {String}` parsed user agent (optional)\n- `$.url {String}` URL endpoint\n- `$.message {Object}` Flow message instance\n- `$.request {Object}` Flow message payload data\n\n__Methods__:\n\n- `$.invalid(error)` responds with an error and ends the action\n- `$.success([value])` responds with `{ success: true, value }` object and ends the action\n- `$.send(value)` responds with `value` object and ends the action\n- `$.cancel()` ends the action without response\n- `$.audit(message, [type])` writes audit\n\n## Supported types\n\n- `string`\n- `number`\n- `boolean`\n- `date`\n- `object`\n- `email`\n- `phone`\n- `zip`\n- `base64`\n- `url`\n- `datauri`\n- `json`\n- `lower`\n- `upper`\n- `capitalize` all words\n- `capitalize2` only first word\n- `name` makes a name (capitalizes words and remove special characters)\n- `zip`\n- `uid`\n- `guid`\n- `color`\n- `icon`\n- `search` prepares string to a search string\n- `safestring` checks XSS and SQL Injections\n- `smallint`\n- `tinyint`\n- `{A|B|C}` enum type\n- `[type]` means array\n- `{ name:String, age:Number }` means nested object\n- `[ name:String, age:Number ]` means array with an object\n- `*something:type` is `required` field\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\" style=\"padding-bottom:5px\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\">Action name</ui-component>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.color\" config=\"required:1;type:color\">Color</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div class=\"pull-left\">\n\t\t\t\t<div class=\"ui-input-label\">Allow only:</div>\n\t\t\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t\t\t<span>Authorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t\t\t<span>Unauthorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t\t\t<span>Both</span>\n\t\t\t\t\t</div>\n\t\t\t\t</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"pull-left\" style=\"margin-left:20px\">\n\t\t\t\t<div style=\"height:25px\"></div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.autoresponse\" config=\"type:checkbox\">Auto HTTP response</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.partial\" config=\"type:checkbox\">Allow partial data</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.strerr\" config=\"type:checkbox\">Convert errors to a string</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.input\" config=\"monospace:1;placeholder:name\\:Name, *email\\:Email\">Payload schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.query\" config=\"monospace:1;placeholder:page\\:Number\">Query arguments schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"padding bg-smoke radius npb\">\n\t\t\t\t<div class=\"grid-3\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.params\" config=\"monospace:1;placeholder:*id\\:String\">Params schema</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.permissions\" config=\"monospace:1;placeholder:admin, director\">Permissions</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;required:1;placeholder:response\">Path for storing a response</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .content { min-width: 200px; }\n\t.CLASS header { color: #FFF; padding: 5px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px 5px; }\n\t.CLASS .ti { color: #999; }\n\t.CLASS footer > div { padding: 10px 10px 0; }\n\t.CLASS-code .CodeMirror { border: 0; border-left: 1px solid #E0E0E0; border-radius: none; }\n\t.CLASS-code-editor { margin-left: 200px; }\n\t.CLASS-code-info { float: left; width: 200px; padding: 12px; font-size: 12px; }\n\t.CLASS-code-info code { overflow-wrap: break-word; white-space: pre; display: block; padding: 0 3px; }\n\t.CLASS-code-button { padding: 10px; border-top: 1px solid #E0E0E0; }\n\t.CLASS-code-button button { font-size: 14px; height: 36px; font-weight: bold; }\n\t.CLASS-settings .iconmenu { height: 80px; }\n\t.CLASS-settings .iconmenu > div { height: 76px; }\n\t.CLASS-settings .iconmenu span { padding-top: 8px; }\n\t.CLASS-settings .iconmenu i { padding-top: 16px; }\n\t.ui-dark .CLASS-code .CodeMirror { border-left-color: #404040; }\n\t.ui-dark .CLASS-code-button { border-top-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"background-color:{{ value.color }}\">{{ value.name }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button exec\" data-exec=\"=sourcecode\"><i class=\"ti ti-js\"></i>Script</button></div>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\" class=\"block fs11\" style=\"padding:10px\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ if value.autoresponse }}<div class=\"b\"><i class=\"ti ti-check-square green mr5\"></i>Auto HTTP response</div>{{ fi }}\n\t\t\t\t<div><i class=\"ti ti-check-square mr5\"></i>{{ if value.user === 1 }}Authorized only{{ else if value.user === 2 }}Unauthorized only{{ else }}All allowed{{ fi }}</div>\n\t\t\t\t{{ if value.partial }}<div><i class=\"ti ti-check-square green mr5\"></i>Partial data</div>{{ fi }}\n\t\t\t\t{{ if value.input }}<div><i class=\"ti ti-check-square green mr5\"></i>Payload</div>{{ fi }}\n\t\t\t\t{{ if value.query }}<div><i class=\"ti ti-check-square green mr5\"></i>URL Query arguments</div>{{ fi }}\n\t\t\t\t{{ if value.params }}<div><i class=\"ti ti-check-square green mr5\"></i>Params</div>{{ fi }}\n\t\t\t\t{{ if value.permissions }}<div><i class=\"ti ti-check-square green mr5\"></i>Permissions</div>{{ fi }}\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (!common.codeactions) {\n\t\t\tcommon.codeactions = {};\n\t\t\tW.codeactionssubmit = function(el) {\n\n\t\t\t\tif (BLOCKED('codeaction', 1000))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar winid = ATTRD(el);\n\t\t\t\tvar id = winid.substring(4);\n\t\t\t\tvar code = common.codeactions[winid];\n\t\t\t\tvar instance = flowinstances.instances[id];\n\t\t\t\tvar config = instance.config;\n\t\t\t\tconfig.code = code;\n\t\t\t\tinstance.reconfigure(config);\n\t\t\t};\n\t\t\tW.codeactionsinit = function(com) {\n\t\t\t\tvar save = () => W.codeactionssubmit(com.element);\n\t\t\t\tvar map = { 'Cmd-S': save, 'Ctrl-S': save };\n\t\t\t\tcom.editor.addKeyMap(map);\n\t\t\t};\n\t\t}\n\n\t\texports.renderschema = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar config = exports.config;\n\n\t\t\tvar write = function(name, label) {\n\t\t\t\tif (config[name]) {\n\t\t\t\t\tbuilder.push('<div class=\"b badge badge-gray\" style=\"display:block\">{0}</div>'.format(label));\n\t\t\t\t\tvar val = config[name].replace(/\\,/g, '\\n');\n\t\t\t\t\tbuilder.push('<div class=\"m mt5\"><code>{0}</code></div>'.format(val));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twrite('params', 'Dynamic parameters');\n\t\t\twrite('query', 'URL query arguments');\n\t\t\twrite('input', 'Payload');\n\n\t\t\treturn builder.join('');\n\t\t};\n\n\t\texports.configure = function() {\n\t\t\tvar key = 'code' + exports.id;\n\t\t\tvar win = common.windows.findItem('id', key);\n\t\t\tif (win) {\n\t\t\t\tvar path = '*codeactions.' + key;\n\t\t\t\tvar prev = GET(path);\n\t\t\t\tif (prev !== exports.config.code)\n\t\t\t\t\tSET(path, exports.config.code);\n\t\t\t\twin.element.find('.CLASS-code-info').html(exports.renderschema());\n\t\t\t}\n\t\t};\n\n\t\texports.sourcecode = function() {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar path = '*codeactions.code' + exports.id;\n\t\t\tvar winid = 'code' + exports.id;\n\n\t\t\tif (common.windows.findItem('id', winid)) {\n\t\t\t\tSETTER('windows/focus', winid);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSET(path, config.code);\n\n\t\t\tPUSH('common.windows', { id: winid, cachekey: 'codeaction', cache: 'readme', html: '<div class=\"CLASS-code invisible\"><div class=\"CLASS-code-info noscrollbar\">{1}</div><div class=\"CLASS-code-editor\"><ui-component name=\"codemirror\" path=\"{0}\" config=\"type:javascript;parent:auto;margin:60;$init:codeactionsinit\"></ui-component></div><div class=\"CLASS-code-button\"><button class=\"button exec\" data-exec=\"codeactionssubmit\">Apply</button></div></div>'.format(path, exports.renderschema()), title: 'Action script: ' + config.name, actions: { move: true, autosave: true, close: true, maximize: true, minimize: false }, offset: { x: ((WW / 2) - 275) >> 0, y: ((WH / 2) - 250) >> 0, width: 750, height: 500, minwidth: 200, minheight: 300, maxwidth: 1200, maxheight: 1200 }, make: function(el) {\n\t\t\t\tel.closest('.ui-windows-item').css('z-index', 50);\n\t\t\t\tel.find('.CLASS-code').rclass('invisible', 500);\n\t\t\t}});\n\t\t};\n\n\t});\n\n</script>",
		"tresponse": "<script total>\n\n\texports.id = 'tresponse';\n\texports.name = 'Response';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-bullhorn';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'auto', code: 200, path: 'response' };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\texports.outputs = [{ id: 'output', name: 'Log' }];\n\texports.kind = 'output';\n\n\texports.make = function(instance, config) {\n\n\t\tvar nested = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tctrl.response.status = config.code;\n\t\t\t\telse\n\t\t\t\t\tctrl.status = config.code;\n\n\t\t\t\tvar value = config.path ? (nested ? U.get(config.path, $.data) : $.data[config.path]) : $.data;\n\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\tif (value instanceof Array && value.length && value[0].error) {\n\t\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\t\tctrl.response.status = 400;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tctrl.status = 400;\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content(value, 'text/html');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('output', value);\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tnested = config.path && config.path.includes('.') ? true : false;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"required:1;dirsource:auto|Auto,json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.type\" config=\"disabled:value === 'auto'\" class=\"m block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number;format:\">Status code</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;align:1\">Path for reading value</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header ui-bind { font-family: var(--monospace); color: #FFF; margin-left: 4px; font-size: 12px; }\n\t.CLASS header ui-bind code { border-radius: var(--radius) 0 0 var(--radius); padding: 2px 3px; }\n\t.CLASS header ui-bind span { background-color: gray; border-radius: 0 var(--radius) var(--radius) 0; padding: 2px 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<code style=\"background:{{ if value.code >= 400 }}#E73323{{ else }}#4285F4{{ fi }}\">{{ value.code }}</code><span>{{ value.type }}</span>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n</body>",
		"troute": "<script total>\n\n\texports.id = 'troute';\n\texports.name = 'Route';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-exchange';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, user: 0, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.close = function() {\n\t\t\tprev && prev.remove();\n\t\t\tprev = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [];\n\n\t\t\t\tconfig.timeout && flags.push(F.is5 ? ('<' + Math.ceil(config.timeout / 1000) + 's') : config.timeout);\n\n\t\t\t\tif (F.is5 && config.upload)\n\t\t\t\t\tflags.push('<' + config.limit + 'MB');\n\n\t\t\t\tconfig.upload && flags.push((F.is5 ? '@' : '') + 'upload');\n\n\t\t\t\tvar action = function($) {\n\n\t\t\t\t\tvar ctrl = F.is5 ? $ : this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\t// Parse cookies\n\t\t\t\t\tvar cookies = {};\n\t\t\t\t\tvar cookie = ctrl.headers.cookie;\n\n\t\t\t\t\tif (cookie) {\n\t\t\t\t\t\tlet arr = cookie.split(';');\n\t\t\t\t\t\tfor (let c of arr) {\n\t\t\t\t\t\t\tlet line = c.trim();\n\t\t\t\t\t\t\tlet index = line.indexOf('=');\n\t\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\t\tcookies[line.substring(0, index)] = line.substring(index + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar query = ctrl.query;\n\t\t\t\t\tvar body = ctrl.body;\n\t\t\t\t\tvar params = ctrl.params;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\tdata = ctrl.user;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cookies':\n\t\t\t\t\t\t\tdata = cookies;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: body, query: query, user: ctrl.user, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: params, ip: ctrl.ip, split: ctrl.split, cookies: cookies, ua: ctrl.ua };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\n\t\t\t\t};\n\n\t\t\t\tvar auth = config.user == 1 ? '+' : config.user == 2 ? '-' : '';\n\t\t\t\tvar url = config.url.replace(/#/g, instance.main.id);\n\t\t\t\tprev = F.is5 ? ROUTE(auth + config.method + ' ' + url + (config.action && config.method === 'API' ? (' ' + config.action) : '') + ' ' + flags.join(' '), action) : ROUTE(auth + config.method + ' ' + instance.replace(url) + (config.action && config.method === 'API' ? (' ' + config.action) : ''), action, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n__Output data__:\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-bind path=\"flow.head.worker\" config=\"hide:!value || flow.head.origin.length < flow.head.proxyurl.length\" class=\"block\">\n\t\t\t<div class=\"message message-error\"><b><i class=\"ti ti-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t</ui-bind>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE,API|API\">Method</ui-component>\n\t\t\t\t<div class=\"help\">HTTP method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"monospace:1;required:1\">Relative URL address</ui-component>\n\t\t\t\t<div class=\"help\">A relative path to: <ui-bind path=\"flow.head.proxyurl\" config=\"text:value?value:window.location.origin\"></ui-bind><br />It supports wildcard <code>/something/*</code> or dynamic arguments <code>/products/{category}/</code>.<br /><code>#</code> will be replaced with a FlowStream <code>id</code> identifier.</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<ui-bind path=\"?.method\" config=\"show:value === 'API'\" class=\"block hidden m padding bg-smoke radius\">\n\t\t\t<ui-component name=\"input\" path=\"?.action\" config=\"monospace:1;required:1;placeholder:+users_read/{id}\">API Action</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-component name=\"input\" path=\"?.upload\" config=\"type:checkbox\">Allow uploading files</ui-component>\n\t\t<hr />\n\n\t\t<div class=\"ui-input-label mt10\">Continue as:</div>\n\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t<span>Authorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t<span>Unauthorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t<span>Both</span>\n\t\t\t</div>\n\t\t</ui-component>\n\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"required:1;type:number;format:\">Timeout</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"required:1;type:number;ricon:!kB;align:1;format:\">Request limit</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers,cookies|Cookies,user|User\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; color: #999; }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer class=\"monospace\"></footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar template = Tangular.compile('{{ if value.user == 1 }}<i class=\"ti ti-lock red mr10\"></i>{{ else if value.user == 2 }}<i class=\"ti ti-unlock blue mr10\"></i>{{ fi }}<span class=\"method\">{{ value.method }}</span> <a href=\"{{ value.link }}\" target=\"_blank\">{{ value.url }}</a>{{ if value.method === \\'API\\' }} {{ value.action }}{{ fi }}');\n\n\t\tvar reload = function() {\n\t\t\tvar model = CLONE(exports.config);\n\t\t\tmodel.link = model.url = model.url.replace(/#/g, flow.head.id);\n\n\t\t\tif (flow.head.proxypath)\n\t\t\t\tmodel.link = flow.head.origin + (flow.head.proxypath + model.link).replace(/\\/{2,}/g, '/');\n\t\t\telse\n\t\t\t\tmodel.link = flow.head.origin + model.link;\n\n\t\t\texports.element.find('footer').html(template({ value: model }));\n\t\t};\n\n\t\texports.configure = reload;\n\t\treload();\n\t});\n</script>",
		"print": "<script total>\n\n\texports.id = 'print';\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '5';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = '<Buffer ' + data.toString('hex').substring(0, 10) + '...';\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tif (output) {\n\t\t\t\toutput = JSON.stringify(output, serializer);\n\t\t\t\tinstance.status(output, 200);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-bind { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .json { white-space: pre; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"html pre:Thelpers.jsonformat(JSON.stringify(JSON.parse(value), null, '\\t'));show:value && value.length > 0\" class=\"hidden selectable block\">\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"ti ti-window\"></i></span>\n\t\t\t<div class=\"noscrollbar mt5\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (reinit)\n\t\t\treturn;\n\n\t\tvar laststatus;\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t};\n\n\t\texports.element.on('click', '.readme', function() {\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(JSON.parse(laststatus), null, '  ') + '\\n```');\n\t\t});\n\n\t});\n</script>",
		"counter": "<script total>\n\n\texports.id = 'counter';\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'ti ti-calculator';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar status = { count: 0, ts: null };\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.count++;\n\t\t\tstatus.ts = NOW = new Date();\n\t\t\tinstance.status(status, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tstatus.count = 0;\n\t\t\tstatus.ts = null;\n\t\t\tinstance.status(status);\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n\t.CLASS .ts { text-align: center; font-size: 11px; color: #777; padding: 5px 0; border-top: 1px solid rgba(0,0,0,0.1); margin: 0 15px; }\n</style>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"template\" class=\"block\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"status\">{{ value.count }}</div>\n\t\t\t\t<div class=\"ts\">{{ if value.ts }}{{ value.ts | format('[ts]') }}{{ else }}---{{ fi }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
		"tapirouter": "<script total>\n\n\texports.id = 'tapirouter';\n\texports.name = 'API Router';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-crosshairs';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { path: 'response', schema: [{ id: 'o1984', name: 'users_read/{id}' }] };\n\texports.outputs = [];\n\texports.kind = 'action';\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data.payload || $.data.body;\n\t\t\tif (data && typeof(data.schema) === 'string') {\n\n\t\t\t\tvar index;\n\t\t\t\tvar schema = $.refs.schema;\n\n\t\t\t\tif (!schema) {\n\t\t\t\t\tlet tmp = {};\n\t\t\t\t\tlet meta = data.schema;\n\t\t\t\t\tindex = meta.indexOf('?');\n\t\t\t\t\ttmp.query = index === -1 ? '' : meta.substring(index + 1);\n\n\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\tmeta = meta.substring(0, index);\n\n\t\t\t\t\tindex = meta.indexOf('/');\n\t\t\t\t\ttmp.id = index === -1 ? meta : meta.substring(0, index);\n\t\t\t\t\ttmp.params = index === -1 ? EMPTYARRAY : meta.substring(index + 1).split('/').trim();\n\t\t\t\t\t$.refs.schema = tmp;\n\t\t\t\t\tschema = tmp;\n\t\t\t\t}\n\n\t\t\t\tvar meta = compiled[schema.id];\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tif (schema.params.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = schema.params[i];\n\n\t\t\t\t\t\tlet payload = $.data;\n\t\t\t\t\t\tpayload.query = schema.query ? DEF.parsers.urlencoded(schema.query) : {};\n\t\t\t\t\t\tpayload.payload = data.data;\n\t\t\t\t\t\tpayload.params = params;\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t$.data[config.path] = [{ id: '400', error: 'Invalid schema data' }];\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data[config.path] = [{ id: '404', error: '404' }];\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component routes incoming Total.js API data according to the defined API schema. The component extends input data (query, payload and params) with parsed data.\n\n__Input & Output data__:\n\n```js\n{\n\t// REQUIRED payload:\n\tpayload: {\n\t\tschema: 'schema_name/{param_1}/{param_2}?query=arguments',\n\t\tdata: {} // optional, request payload\n\t},\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed UA\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\nIn the case of  `error`, the input data is extended by the `response` property with an error.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tapirouter.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"ti ti-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure --> data-id;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
		"teleport": "<script total>\n\n\texports.id = 'teleport';\n\texports.name = 'Teleport';\n\texports.icon = 'ti ti-globe';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.group = 'Common';\n\texports.config = { type: 'input', target: '', name: '', color: '#B9261A', is: false };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (config.type === 'output') {\n\t\t\t\t$.send('output');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (config.target) {\n\t\t\t\tvar target = instance.main.meta.flow[config.target];\n\t\t\t\tif (target) {\n\n\t\t\t\t\tinstance.stats.pending--;\n\t\t\t\t\tinstance.stats.output++;\n\n\t\t\t\t\tif (instance.stats.pending < 0)\n\t\t\t\t\t\tinstance.stats.pending = 0;\n\n\t\t\t\t\t$.toid = target.id;\n\t\t\t\t\t$.instance = target;\n\t\t\t\t\t$.instance.stats.pending++;\n\t\t\t\t\ttarget.message($);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tconfig.is = config.name || config.target ? true : false;\n\n\t\t\tvar inputs = [];\n\t\t\tvar outputs = [];\n\t\t\tvar is = false;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'input':\n\t\t\t\t\tvar target = config.target ? instance.main.meta.flow[config.target] : null;\n\t\t\t\t\tinputs.push({ id: 'input', name: 'Input' });\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'output':\n\t\t\t\t\toutputs.push({ id: 'output', name: config.name });\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar jsoninputs = JSON.stringify(instance.inputs || EMPTYARRAY);\n\t\t\tvar jsonoutputs = JSON.stringify(instance.outputs || EMPTYARRAY);\n\n\t\t\tif (JSON.stringify(inputs) !== jsoninputs) {\n\t\t\t\tis = true;\n\t\t\t\tinstance.inputs = inputs;\n\t\t\t}\n\n\t\t\tif (JSON.stringify(outputs) !== jsonoutputs) {\n\t\t\t\tis = true;\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t}\n\n\t\t\tis && instance.save();\n\t\t};\n\n\t\tinstance.close = function(destroyed) {\n\t\t\tif (!destroyed || config.type === 'input')\n\t\t\t\treturn;\n\n\t\t\tvar meta = instance.main.meta;\n\t\t\tfor (var key in meta.flow) {\n\t\t\t\tvar tmp = meta.flow[key];\n\t\t\t\tif (tmp.component) {\n\t\t\t\t\tvar com = meta.components[tmp.component];\n\t\t\t\t\tif (com &&\n\t\t\t\t\t\tcom.name === 'Teleport' && tmp.config.type === 'input' && tmp.config.target === instance.id)\n\t\t\t\t\t\ttmp.reconfigure({ target: '' });\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component can teleport (input) message to another teleport (output) component.\n</readme>\n\n<style>\n\t.CLASS .content { min-height: 10px; min-width: 50px; border-radius: var(--radius) var(--radius) 0 0; }\n\t.CLASS .input, .CLASS .output { border-top-color: transparent; }\n\t.CLASS .inputs, .CLASS .outputs { text-align: center; }\n\t.CLASS .colorbar { height: 10px; }\n\t.CLASS span { pointer-events: none; }\n\t.CLASS-settings figure { cursor: pointer; }\n\t.CLASS-settings .item { line-height: 28px; font-size: 12px; background-color: #F8F8F8; border-radius: var(--radius); margin-bottom: 2px; padding: 0 10px; cursor: pointer; }\n\t.CLASS-settings .item.selected { background-color: #E8E8E8; }\n\t.ui-dark .CLASS-settings .item { background-color: #333; }\n\t.ui-dark .CLASS-settings .item.selected { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"CLASS-settings padding\">\n\n\t\t<ui-bind path=\"?.is\" config=\"hide\" class=\"block\">\n\t\t\t<ui-component name=\"choose\" path=\"?.type\" config=\"selector:div\" class=\"iconmenu m\">\n\t\t\t\t<div data-id=\"input\">\n\t\t\t\t\t<i class=\"ti ti-dot-circle\"></i>\n\t\t\t\t\t<span>Input</span>\n\t\t\t\t</div>\n\t\t\t\t<div data-id=\"output\">\n\t\t\t\t\t<i class=\"ti ti-crosshairs\"></i>\n\t\t\t\t\t<span>Output</span>\n\t\t\t\t</div>\n\t\t\t</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-bind path=\"?.type\" config=\"show:value=='output'\" class=\"hidden block\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\">Name</ui-component>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.color\" config=\"type:color\">Color</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ui-bind>\n\n\t\t<ui-bind path=\"?.type\" config=\"show:value=='input'\" class=\"block\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<label>Where to send data?</label>\n\t\t\t</div>\n\t\t\t<ui-component name=\"choose\" path=\"?.target\" config=\"selector:.item\">\n\t\t\t\t<ui-bind path=\"%teleportinstances\" config=\"template:.item -> data-id\" class=\"listing block\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t\t<div class=\"item\" data-id=\"{{ m.id }}\"><i class=\"ti ti-crosshairs mr5\"></i>{{ m.name }}</div>\n\t\t\t\t\t\t{{ end }}\n\t\t\t\t\t</script>\n\t\t\t\t</ui-bind>\n\t\t\t</ui-component>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<body>\n\t<ui-component name=\"watcher\" path=\"CONFIG\">\n\t\t<script type=\"text/js\">\n\n\t\t\tif (!value)\n\t\t\t\treturn;\n\n\t\t\tcomponent.watcherbackup && component.unwatch(component.watcherbackup);\n\t\t\tvar defcolor = '#888';\n\t\t\tvar deftext = 'Not configured';\n\t\t\tvar el = element.closest('.area');\n\t\t\tif (value.type ==='input') {\n\t\t\t\tif (value.target) {\n\t\t\t\t\tvar target = 'flow.config.' + value.target;\n\t\t\t\t\tcomponent.watch(target, function(path, config) {\n\t\t\t\t\t\tvar conf = config || EMPTYOBJECT;\n\t\t\t\t\t\tel.find('.content').css('background', conf.color || defcolor);\n\t\t\t\t\t\tel.find('.inputs span').text(conf.name || deftext);\n\t\t\t\t\t}, true);\n\t\t\t\t} else {\n\t\t\t\t\tel.find('.content').css('background', defcolor);\n\t\t\t\t\tel.find('.inputs span').text(deftext);\n\t\t\t\t}\n\t\t\t\tcomponent.watcherbackup = target;\n\t\t\t} else\n\t\t\t\tel.find('.content').css('background', value.color || defcolor);\n\t\t</script>\n\t</ui-component>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar arr = [];\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar tmp = flow.data[key];\n\t\t\t\tif (tmp.Component && tmp.Component.name === 'Teleport' && tmp.config.type === 'output' && key !== exports.id)\n\t\t\t\t\tarr.push({ id: key, name: tmp.config.name });\n\t\t\t}\n\n\t\t\tSET('%teleportinstances', arr);\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\n\t\t\t\tvar config = exports.config;\n\t\t\t\tvar inputs = [];\n\t\t\t\tvar outputs = [];\n\n\t\t\t\tif (config.type === 'input') {\n\t\t\t\t\tvar target = flow.data[config.target];\n\t\t\t\t\tinputs.push({ id: 'input', name: target ? target.config.name : 'Input' });\n\t\t\t\t} else\n\t\t\t\t\toutputs.push({ id: 'output', name: config.name });\n\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\texports.instance.inputs = inputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>"
	},
	"design": {
		"ilrivw79u": {
			"id": "ilrivw79u",
			"config": {
				"url": "/",
				"method": "GET",
				"timeout": 5000,
				"limit": 5120,
				"upload": false,
				"user": 0,
				"send": "all"
			},
			"x": 174,
			"y": 322,
			"note": "Visit <http://127.0.0.1:8000>",
			"component": "troute",
			"connections": {
				"output": [
					{
						"id": "ilrivx9bm",
						"index": "input"
					}
				]
			}
		},
		"ilrivw9g0": {
			"id": "ilrivw9g0",
			"config": {
				"type": "auto",
				"code": 200,
				"path": "response"
			},
			"x": 828,
			"y": 506,
			"component": "tresponse",
			"connections": {
				"output": [
					{
						"id": "ilrizom80",
						"index": "input"
					}
				]
			}
		},
		"ilrivx9bm": {
			"id": "ilrivx9bm",
			"config": {
				"partial": false,
				"name": "Welcome",
				"input": "",
				"query": "",
				"color": "#68B25B",
				"params": "",
				"user": 0,
				"permissions": "",
				"code": "$.callback({ message: 'Welcome to the LessCode app!' });",
				"strerr": false,
				"path": "response",
				"autoresponse": false
			},
			"x": 484,
			"y": 386,
			"component": "taction",
			"connections": {
				"output": [
					{
						"id": "ilrizpkpm",
						"index": "input"
					},
					{
						"id": "ilrivw9g0",
						"index": "input"
					}
				],
				"error": [
					{
						"id": "ilrivw9g0",
						"index": "input"
					}
				]
			}
		},
		"ilrizom80": {
			"id": "ilrizom80",
			"config": {
				"repo": false,
				"data": true
			},
			"x": 1114,
			"y": 523,
			"component": "print",
			"connections": {}
		},
		"ilrizpkpm": {
			"id": "ilrizpkpm",
			"config": {},
			"x": 830,
			"y": 288,
			"component": "counter",
			"connections": {}
		}
	},
	"sources": {}
}